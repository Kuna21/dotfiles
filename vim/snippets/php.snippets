extends html
## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet <? "Dumb autoclose"
<?php $1 ?>
endsnippet

snippet doc_f "doc_f"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 **/
${1:public }function ${2:someFunc}(${3})
{
    ${6:// code...}
}
endsnippet

snippet doc_c "doc_c"
/**
 * $2
 * @author ${3:`!v g:snips_author`}
 **/
class ${2:someClass}
{
    function __construct()
    {
        ${4:// code...}
    }
}
endsnippet

snippet doc_i "doc_i"
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 **/
interface ${1:someClass}
{${4}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreach "foreach"
foreach ($${1:variable} as $${2:value}){
	${3:// code...}
}
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet


snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}){
    ${4:// code...}
}
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
$3
endsnippet


snippet ife "if else"
if (${1:/* condition */}) {
    ${2:// code...}
} else {
    ${3:// code...}
}
endsnippet


snippet class "Class declaration template" !b
/**
 * Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`} 
 * @author $2
 */
class $1
{
    public function ${3:__construct}(${4:$options})
    {
        ${4:// code}
    }
}
endsnippet

snippet pr "Demb debug helper in HTML"
echo "<pre style='background: white; color: black;'>" . var_export($1, 1) . '</pre>';
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);
endsnippet

# Code Igniter specific
snippet clog "Log a message CodeIgniter style"
log_message('${2:debug}', "${1:--- MARK ---}");
endsnippet

snippet cprofile "Enable profiling"
$this->output->enable_profiler(TRUE);
endsnippet

# PHP templating specific
snippet <?= "I like inline php, but it's a sin"
<?php echo $1; ?>
endsnippet

snippet [  "Array shorthand for old php versions"
array($1);
endsnippet

# :vim:ft=snippets:
