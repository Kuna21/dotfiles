extends html
## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet doc_f "doc_f"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 **/
${1:public }function ${2:someFunc}(${3})
{
    ${6:// code...}
}
endsnippet

snippet doc_c "doc_c"
/**
 * $2
 * @author ${3:`!v g:snips_author`}
 **/
class ${2:someClass}
{
    function __construct()
    {
        ${4:// code...}
    }
}
endsnippet

snippet doc_i "doc_i"
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 **/
interface ${1:someClass}
{${4}
} // END interface $1"
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreach "foreach"
foreach ($${1:variable} as $${2:value}){
	${3:// code...}
}
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if"
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet t "t"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" !b
/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}() 
{
    return $this->$1;$2
}
$4
endsnippet

snippet setter "PHP Class Setter" !b
/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;$3
    return $this;
}
$4
endsnippet

snippet gs "PHP Class Getter Setter" !b
protected $$1

/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}() 
{
    return $this->$1;$2
}

/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;$3
    return $this;
}
$4
endsnippet

snippet pub "Public function" !b
public function ${1:name}(${2:$param})
{
    ${3:return null;}
}
endsnippet

snippet pro "Protected function" !b
protected function ${1:name}(${2:$param})
{
    ${3:return null;}
}
endsnippet

snippet pri "Private function" !b
private function ${1:name}(${2:$param})
{
    ${3:return null;}
}
endsnippet

snippet pubs "Public static function" !b
public static function ${1:name}(${2:$param})
{
    ${3:return null;}
}
endsnippet

snippet pros "Protected static function" !b
protected static function ${1:name}(${2:$param})
{
    ${3:return null;}
}
endsnippet

snippet pris "Private static function" !b
private static function ${1:name}(${2:$param})
{
    ${3:return null;}
}
endsnippet

snippet fu "Function snip" !b
function ${1:name}(${2:$param}) 
{
    ${3:return null;}
}
endsnippet
# :vim:ft=snippets

snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}){
    ${4:// code...}
}
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
$3
endsnippet


snippet ife "if else"
if (${1:/* condition */}) {
    ${2:// code...}
} else {
    ${3:// code...}
}
endsnippet


snippet class "Class declaration template" !b
/**
 * Class ${1:`!p snip.rv=snip.fn.capitalize().split('.')[0]`} 
 * @author $2
 */
class $1
{
    public function ${3:__construct}(${4:$options})
    {
        ${4:// code}
    }
}
endsnippet

snippet pr "Demb debug helper in HTML"
echo "<pre style='background: white; color: black;'>" . var_export($1, 1) . '</pre>';
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);
endsnippet

snippet redirect "301 redirect"
// Redirect
header("Location: ${1:foo.php}",TRUE,301);
die();
endsnippet

snippet <?= "I like inline php, but it's a sin"
<?php echo $1; ?>
endsnippet

# Templating foreach
snippet hforeach "Foreach for use in HTML templates"
<?php if($$1): ?>
<?php foreach($$1 as $${2:item}): ?>
${3:<!-- Code -->}
<?php endforeach; ?>
<?php endif; // $1?>
endsnippet

# PDO database connection
snippet pdo "Basic PHP PDO connection"
$host = '${4:localhost}';
$database = '$1';
$user = '$2';
$password = '$3';

try {
    $dbh = new PDO("mysql:dbname={$database};host={$host}", $user, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}
endsnippet

# Code Igniter specific
snippet clog "Log a message CodeIgniter style"
log_message('${2:debug}', "${1:--- MARK ---}");
endsnippet

snippet cprofile "Enable profiling"
$this->output->enable_profiler(TRUE);
endsnippet

# :vim:ft=snippets:
